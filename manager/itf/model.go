/*
 * Copyright 2022 InfAI (CC SES)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package itf

import (
	"github.com/SENERGY-Platform/mgw-container-engine-manager-lib/cem-lib"
	"io/fs"
)

// EXPOSE MODULE-MANAGER (FOR SUB DEPLOYMENTS) TO OTHER CONTAINERS VIA CORE API GATEWAY
// GUI IS ADD-ON MODULE EXPOSED VIA API GATEWAY

// versioning | golang creates folders like "go-service-base@v0.5.1" | how to version images? version tags?

// github handler -> implements module source handler itf -> get, check, ...

// module-manager names containers and sets name as domain name (alias)

// =vX.X.X pin
// >vX.X.X greater than
// <vX.X.X less than
// >=vX.X.X greater than or equal
// <=vX.X.X less than or equal
// >vX.X.X;<vX.X.X greater than and less than
// >=vX.X.X;<vX.X.X greater than or equal and less than
// >vX.X.X;<=vX.X.X greater than and less than or equal
// >=vX.X.X;<=vX.X.X greater than or equal and less than or equal

type ModuleID string

type ModuleType string

type SemVersion string

type SemVersionRange string

type VersionOperator string

type DeploymentType string

type ResourceType string

// Modfile ------------------------------------->

type Module struct {
	ID             ModuleID       `json:"id"` // url without scheme
	Type           ModuleType     `json:"type"`
	Version        SemVersion     `json:"version"`
	Name           string         `json:"name"`
	Description    string         `json:"description"`
	Services       []Service      `json:"services"`
	Dependencies   []Dependency   `json:"dependencies"`    // must be installed and deployed before module deployment
	DeploymentType DeploymentType `json:"deployment_type"` // if MultipleDeployment the module can't be used as dependency
}

type Service struct {
	Name             string            `json:"name"`
	Image            string            `json:"image"`
	Include          []BindMount       `json:"include"`       // files or dirs from module repo
	VolumeMounts     []string          `json:"volume_mounts"` // mount points
	TmpfsMounts      []TmpfsMount      `json:"tmpfs_mounts"`
	HttpApis         []HttpApi         `json:"http_apis"`
	PortBindings     []PortBinding     `json:"port_bindings"`
	RequiredServices []RequiredService `json:"required_services"`
	RunConfig        cem_lib.RunConfig `json:"run_config"`
	UserConfig       UserConfig        `json:"user_config"`
}

type BindMount struct {
	MountPoint string `json:"mount_point"`
	Source     string `json:"source"` // relative path in module dir | prevent mounting of Modfile | must exist
	ReadOnly   bool   `json:"read_only"`
}

type TmpfsMount struct {
	MountPoint string      `json:"mount_point"`
	Size       int64       `json:"size"`
	Mode       fs.FileMode `json:"mode"`
}

type Dependency struct {
	ModuleID      ModuleID        `json:"module_id"`
	ModuleVersion SemVersionRange `json:"module_version"`
}

type RequiredService struct {
	ModuleID ModuleID `json:"module_id"`
	Name     string   `json:"name"`
	RefVar   string   `json:"ref_var"` // env var name for container domain name provided by module-manager during deployment
}

type PortBinding struct {
	Name       string           `json:"name"`
	Port       int              `json:"port"`
	TargetPort int              `json:"target_port"` // can be overridden by module-manager during deployment to avoid collisions
	Protocol   cem_lib.PortType `json:"protocol"`
}

type HttpApi struct {
	Name string `json:"name"`
	Port int    `json:"port"`
	Path string `json:"path"`
}

type UserConfig struct {
	EnvVars   map[string]string `json:"env_vars"`  // Template with defaults
	Resources []Resource        `json:"resources"` // Define type, mount point or ref var | resources listed by host-manager and selected via gui or app
}

type Resource struct {
	ID         string       `json:"id"` // set by user during deployment (via host-manager)
	Type       ResourceType `json:"type"`
	MountPoint string       `json:"mount_point"` // required by mount resources
	ReadOnly   bool         `json:"read_only"`   // only applies to mount resources
	RefVar     string       `json:"ref_var"`     // required by link resources
}

// <------------------------------------- Modfile

// Stored in Deployment DB --------------------->

type Deployment struct {
	ID            string // generated by module-manager during deployment
	Name          string // provided by user
	ModuleID      ModuleID
	ModuleVersion SemVersion
	InstanceIDs   []string
}

type SubDeployment struct {
	ID           string // generated by module-manager during deployment
	DeploymentID string // parent deployment id
	InstanceID   string
}

type Instance struct {
	ID          string
	ContainerID string
	DomainName  string
	ServiceName string
	Config      UserConfig
}

// <--------------------- Stored in Deployment DB
